# FSN Appium Farm - Docker Compose for VPS Deployment
# Complete production-ready setup with licensing

version: '3.8'

services:
  # License Server (Critical for operation)
  license-server:
    build:
      context: ../license-server
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - ADMIN_SECRET_KEY=${LICENSE_ADMIN_SECRET_KEY}
    volumes:
      - license_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fsn_network

  # Main API (with license enforcement)
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://fsn_user:${DB_PASSWORD}@db:5432/fsn_appium_farm
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LICENSE_SERVER_URL=http://license-server:8001
      - LICENSE_CLIENT_ID=${LICENSE_CLIENT_ID}
      - LICENSE_KEY=${LICENSE_KEY}
      - LICENSE_DEV_MODE=false
      - DEPLOYMENT_ENV=production
      - SECRET_KEY=${API_SECRET_KEY}
    depends_on:
      - db
      - redis
      - license-server
    volumes:
      - api_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fsn_network

  # Frontend (Next.js)
  frontend:
    build:
      context: ../
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NODE_ENV=production
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - fsn_network

  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: fsn_appium_farm
      POSTGRES_USER: fsn_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deploy/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - fsn_network

  # Redis (for job queue and caching)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - fsn_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deploy/nginx.conf:/etc/nginx/nginx.conf
      - ../deploy/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - api
      - license-server
    restart: unless-stopped
    networks:
      - fsn_network

  # Monitoring (optional but recommended)
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../deploy/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - fsn_network

volumes:
  postgres_data:
  redis_data:
  license_data:
  api_logs:
  nginx_logs:
  prometheus_data:

networks:
  fsn_network:
    driver: bridge
